import wikipedia
import sympy
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, ContextTypes, filters, CallbackQueryHandler
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —è–∑—ã–∫ –í–∏–∫–∏–ø–µ–¥–∏–∏
wikipedia.set_lang("ru")
logging.info('set language for wiki executed')

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ—à–µ–Ω–∏—è –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –≤—ã—Ä–∞–∂–µ–Ω–∏–π
def solve_math(query):
    try:
        query = query.lower().strip()

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ "–∫–æ—Ä–µ–Ω—å –∏–∑ X" –∏ "–∫–≤–∞–¥—Ä–∞—Ç–Ω—ã–π –∫–æ—Ä–µ–Ω—å –∏–∑ X"
        if "–∫–æ—Ä–µ–Ω—å –∏–∑" in query or "–∫–≤–∞–¥—Ä–∞—Ç–Ω—ã–π –∫–æ—Ä–µ–Ω—å –∏–∑" in query:
            for phrase in ["–∫–≤–∞–¥—Ä–∞—Ç–Ω—ã–π –∫–æ—Ä–µ–Ω—å –∏–∑", "–∫–æ—Ä–µ–Ω—å –∏–∑"]:
                if phrase in query:
                    number_str = query.split(phrase, 1)[1].strip()
                    break

            try:
                number = float(number_str)
            except ValueError:
                return f"–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —á–∏—Å–ª–æ –≤ –∑–∞–ø—Ä–æ—Å–µ: `{number_str}`"

            expr = sympy.sqrt(number)
            return f"–ö–æ—Ä–µ–Ω—å –∏–∑ {number} —Ä–∞–≤–µ–Ω: `{expr.evalf()}`"

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ –∑–∞–ø—Ä–æ—Å –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã
        if not any(op in query for op in ['+', '-', '*', '/', '^', 'sqrt']):
            # –ï—Å–ª–∏ –Ω–µ—Ç –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤, —ç—Ç–æ –Ω–µ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ
            return None

        # –û–±—ã—á–Ω–æ–µ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ
        expr = sympy.sympify(query)
        result = expr.evalf()
        logging.info("function solve_math executed")
        return f"–†–µ–∑—É–ª—å—Ç–∞—Ç: `{result}`"

    except sympy.SympifyError as e:
        logging.error(f'Error : {e}')
        return None

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫
async def button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    selected_option = query.data
    await query.answer()

    try:
        summary = wikipedia.summary(selected_option)
        page = wikipedia.page(selected_option)
        response = f"{summary}\n\nüîó [–ß–∏—Ç–∞—Ç—å –±–æ–ª—å—à–µ]({page.url})"
        await query.edit_message_text(response, parse_mode='Markdown')
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –≤–∞—Ä–∏–∞–Ω—Ç–∞: {e}")
        await query.edit_message_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤—ã–±–æ—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")

# –û—Å–Ω–æ–≤–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.message.text.strip()
    logger.info(f"–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å: {query}")

    if not query:
        await update.message.reply_text("–°–æ–æ–±—â–µ–Ω–∏–µ –ø—É—Å—Ç–æ–µ.")
        return

    try:
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –≤—ã—Ä–∞–∂–µ–Ω–∏–µ–º
        math_response = solve_math(query)
        if math_response:
            await update.message.reply_text(math_response, parse_mode='Markdown')
            return

        # –ï—Å–ª–∏ –Ω–µ—Ç ‚Äî –∏—â–µ–º –≤ –í–∏–∫–∏–ø–µ–¥–∏–∏
        try:
            summary = wikipedia.summary(query)
            page = wikipedia.page(query)
            response = f"{summary}\n\nüîó [–ß–∏—Ç–∞—Ç—å –±–æ–ª—å—à–µ]({page.url})"
        except wikipedia.exceptions.DisambiguationError as e:
            # –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—Å –Ω–µ–æ–¥–Ω–æ–∑–Ω–∞—á–Ω—ã–π
            options = e.options[:5]
            response = "–£—Ç–æ—á–Ω–∏—Ç–µ –≤–∞—à –∑–∞–ø—Ä–æ—Å. –ù–∞–π–¥–µ–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:\n"
            for i, option in enumerate(options, start=1):
                response += f"\n{i}. {option}"
            # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏
            keyboard = [[InlineKeyboardButton(option, callback_data=option)] for option in options]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await update.message.reply_text(response, reply_markup=reply_markup)
            return
        except wikipedia.exceptions.PageError:
            response = "–°—Ç–∞—Ç—å—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –í–∏–∫–∏–ø–µ–¥–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å."
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å Wikipedia: {e}")
            response = "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."

        await update.message.reply_text(response, parse_mode='Markdown')

    except Exception as e:
        logger.error(f"–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –ù–∞–ø–∏—à–∏ –º–Ω–µ –ª—é–±–æ–µ —Å–ª–æ–≤–æ –∏–ª–∏ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø—Ä–∏–º–µ—Ä ‚Äî —è –ø–æ–º–æ–≥—É!"
    )
    logging.info('Command start has executed')

# –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞
def main():
    TOKEN = '7702901883:AAGael0VR9Z0-bW7mNQIVMOa4DHwxganHFw'
    logging.info('constants has initialized')
    application = ApplicationBuilder().token(TOKEN).build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    application.add_handler(CallbackQueryHandler(button))  # <-- –ü–æ—Å–ª–µ –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö

    logging.info('Telegram bot has activated')
    application.run_polling()

if __name__ == '__main__':
    main()